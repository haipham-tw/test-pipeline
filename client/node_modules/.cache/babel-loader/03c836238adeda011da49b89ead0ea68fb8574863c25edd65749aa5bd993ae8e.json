{"ast":null,"code":"export let HttpStatus = /*#__PURE__*/function (HttpStatus) {\n  HttpStatus[HttpStatus[\"OK\"] = 200] = \"OK\";\n  HttpStatus[HttpStatus[\"CREATED\"] = 201] = \"CREATED\";\n  HttpStatus[HttpStatus[\"BAD_REQUEST\"] = 400] = \"BAD_REQUEST\";\n  HttpStatus[HttpStatus[\"NOT_FOUND\"] = 404] = \"NOT_FOUND\";\n  return HttpStatus;\n}({});\nexport const get = async (path, acceptedResponseCodes) => {\n  const response = await fetch(path);\n  const responseData = await response.json();\n  if (acceptedResponseCodes.indexOf(response.status) === -1) {\n    throw new Error(responseData.message);\n  }\n  return responseData;\n};\nexport const post = async (path, body, acceptedResponseCodes) => {\n  const response = await fetch(path, {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-type\": \"application/json\"\n    },\n    method: \"POST\",\n    body: JSON.stringify(body)\n  });\n  const responseData = await response.json();\n  if (acceptedResponseCodes.indexOf(response.status) === -1) {\n    throw new Error((responseData === null || responseData === void 0 ? void 0 : responseData.errorMessage) || (responseData === null || responseData === void 0 ? void 0 : responseData.error));\n  }\n  return responseData;\n};","map":{"version":3,"names":["HttpStatus","get","path","acceptedResponseCodes","response","fetch","responseData","json","indexOf","status","Error","message","post","body","headers","Accept","method","JSON","stringify","errorMessage","error"],"sources":["/Users/haipham/Desktop/tw-launch_2/twl-apac-book-store/client/src/utils/api/Api.ts"],"sourcesContent":["export enum HttpStatus {\n  OK = 200,\n  CREATED = 201,\n  BAD_REQUEST = 400,\n  NOT_FOUND = 404\n}\n\nexport const get = async <T>(path: string, acceptedResponseCodes : HttpStatus[]): Promise<T> => {\n  const response = await fetch(path);\n  const responseData = await response.json();\n\n  if(acceptedResponseCodes.indexOf(response.status) === -1) {\n    throw new Error(responseData.message)\n  }\n\n  return responseData;\n};\n\n\nexport const post = async<PAYLOAD, RESPONSE> (path: string, body: PAYLOAD, acceptedResponseCodes : HttpStatus[]): Promise<RESPONSE> => {\n  const response = await fetch(path, {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-type\": \"application/json\"\n    },\n    method: \"POST\",\n    body: JSON.stringify(body)\n  });\n\n  const responseData = await response.json();\n  if(acceptedResponseCodes.indexOf(response.status) === -1 ){\n    throw new Error(responseData?.errorMessage || responseData?.error)\n  }\n  \n  return responseData;\n}\n"],"mappings":"AAAA,WAAYA,UAAU,0BAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAOtB,OAAO,MAAMC,GAAG,GAAG,MAAAA,CAAUC,IAAY,EAAEC,qBAAoC,KAAiB;EAC9F,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,IAAI,CAAC;EAClC,MAAMI,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAE1C,IAAGJ,qBAAqB,CAACK,OAAO,CAACJ,QAAQ,CAACK,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;IACxD,MAAM,IAAIC,KAAK,CAACJ,YAAY,CAACK,OAAO,CAAC;EACvC;EAEA,OAAOL,YAAY;AACrB,CAAC;AAGD,OAAO,MAAMM,IAAI,GAAG,MAAAA,CAA0BV,IAAY,EAAEW,IAAa,EAAEV,qBAAoC,KAAwB;EACrI,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,IAAI,EAAE;IACjCY,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,MAAM,EAAE,MAAM;IACdH,IAAI,EAAEI,IAAI,CAACC,SAAS,CAACL,IAAI;EAC3B,CAAC,CAAC;EAEF,MAAMP,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAC1C,IAAGJ,qBAAqB,CAACK,OAAO,CAACJ,QAAQ,CAACK,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;IACxD,MAAM,IAAIC,KAAK,CAAC,CAAAJ,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEa,YAAY,MAAIb,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEc,KAAK,EAAC;EACpE;EAEA,OAAOd,YAAY;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}